pipeline {

    agent{

        docker {
            image 'loknathp/nodeapp-docker:18-alpine'
            args '-u root -v /var/run/docker.sock:/var/run/docker.sock'        }
    } 

    stages {

        stage('Checkout') {
            steps {
                echo "Checking out from main branch..."
                checkout scm // OR use the explicit URL version if needed
            }
        }

        stage('Install Dependencies') {
            steps {
                dir('source_code') {
                    echo "Installing dependencies..."
                    sh 'npm install --cache .npm-cache'
                }
            }
        }

        stage('Test') {
            steps {
                dir('source_code') {
                    echo "Running tests..."
                    sh 'npm test'
                }
                junit 'source_code/test/reports/jest-junit.xml'
                archiveArtifacts artifacts: 'source_code/test/reports/jest-junit.xml'
            }
        }




        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "loknathp/node-app-cicd:${BUILD_NUMBER}"
                // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                script {
                    sh 'cd source_code && docker build -t ${DOCKER_IMAGE} .'
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
                    }
                }
            }
        }
    }

    post {
        failure {
            echo "Pipeline failed. Sending notification..."
            // Add your notification logic here (e.g., Slack, Email)
        }
        success {
            echo "Pipeline succeeded!"
        }
    }
}
