pipeline {
    agent{

        docker {
            image 'node:18-alpine'  // or any other node version you need
        }
    } 

    stages {

        stage('Checkout') {
            steps {
                echo "Checking out from main branch..."
                checkout([$class: 'GitSCM',
                          branches: [[name: '*/main']],
                          userRemoteConfigs: [[url: 'https://github.com/loknathPradhan/cicd_project/']]
                ])
            }
        }
        
        stage('Checkout') {
            steps {
                echo "Checking out from main branch..."
                checkout scm
            }
        }

        stage('Install Dependencies') {
            steps {
                dir('source_code') {
                    echo "Installing dependencies..."
                    sh 'npm ci'
                }
            }
        }

        stage('Test') {
            steps {
                dir('source_code') {
                    echo "Running tests..."
                    sh 'npm test'
                }
            }
        }

        stage('Test') {

            steps {
                echo "Running tests..."
                sh 'npm i' // Faster & cleaner for CI environments
                sh 'npm test'
            }

            post {
                always {
                    junit 'tests/reports/jest-junit.xml'
                }
                failure {
                    script {
                        currentBuild.result = 'FAILURE'
                        error('Tests failed')
                    }
                }
            }
        }

        // stage('SonarQube Analysis') {
        //     environment {
        //         scannerHome = tool 'SonarQubeScanner'
        //     }
        //     steps {
        //         withSonarQubeEnv("${SONARQUBE_ENV}") {
        //             sh "${scannerHome}/bin/sonar-scanner"
        //         }
        //     }
        //     post {
        //         failure {
        //             script {
        //                 currentBuild.result = 'FAILURE'
        //                 error('SonarQube analysis failed')
        //             }
        //         }
        //     }
        // }

        // stage('Docker Build & Push') {
        //     steps {
        //         script {
        //             dockerImage = docker.build("${DOCKER_IMAGE}:${env.BUILD_NUMBER}")
        //         }
        //         withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
        //             sh """
        //                 echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
        //                 docker push ${DOCKER_IMAGE}:${env.BUILD_NUMBER}
        //             """
        //         }
        //     }
        // }
    }

    post {
        failure {
            echo "Pipeline failed. Sending notification..."
            // Add your notification logic here (e.g., Slack, Email)
        }
        success {
            echo "Pipeline succeeded!"
        }
    }
}
